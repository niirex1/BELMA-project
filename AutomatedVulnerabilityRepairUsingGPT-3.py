import openai

class SmartContractPatcher:
    def __init__(self, api_key):
        # Initialize the OpenAI API key
        self.api_key = api_key
        openai.api_key = self.api_key

    def generate_repair_patch(self, context, detailed_prompt=False):
        # Choose between a detailed or a concise prompt based on the use case
        if detailed_prompt:
            prompt = f"Given the smart contract vulnerability context: {context}, suggest a patch."
        else:
            prompt = f"Please provide a fix for the following vulnerability: {context}"
        
        response = openai.Completion.create(
            engine="davinci",
            prompt=prompt,
            max_tokens=150,  # Adjusted for potential detailed responses
            n=1,
            stop=None,
            temperature=0.5,  # A balance between creativity and relevance
        )
        
        # Extracting the suggested fix from the response
        fix = response.choices[0].text.strip()
        return fix

# Example usage
api_key = "your_openai_api_key"
patcher = SmartContractPatcher(api_key)
context = "A vulnerability description goes here."

# Generating a fix with a detailed prompt
detailed_fix = patcher.generate_repair_patch(context, detailed_prompt=True)
print(f"Detailed Suggested Fix: {detailed_fix}")

# Generating a fix with a concise prompt
concise_fix = patcher.generate_repair_patch(context, detailed_prompt=False)
print(f"Concise Suggested Fix: {concise_fix}")
